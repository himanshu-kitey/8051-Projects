C51 COMPILER V9.60.7.0   I2CDETECTDRIVER                                                   10/16/2024 14:21:14 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE I2CDETECTDRIVER
OBJECT MODULE PLACED IN .\Objects\i2cDetectDriver.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE i2cDetectDriver.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Li
                    -stings\i2cDetectDriver.lst) TABS(2) OBJECT(.\Objects\i2cDetectDriver.obj)

line level    source

   1          #include "types.h"
   2          #include "i2c_defines.h"
   3          #include "dlyMs.h"
   4          #include "lcd_headers.h"
   5          
   6          /*  Routine to issue start event/condition. */
   7          void i2cStart(void)
   8          {
   9   1        SCL=1;            //Default status of SDA line can be avoided.
  10   1        SDA=1;            //Default status of SCL line can be avoided.
  11   1        SDA=0;            //Pull down sda from high to low issues start event.
  12   1      }
  13          
  14          /*  Routine to issue Stop event/condition. */
  15          void i2cStop(void)
  16          {
  17   1        SCL=0;            //To change status of SDA ,SCL is made low during communication.
  18   1        SDA=0;            //Now SCL is made low.
  19   1        SCL=1;            //SCL line is released.
  20   1        SDA=1;            //SDA is raised from low to high to issue stop condition.
  21   1      }
  22          
  23          bit I2C_Write(u8 dat)       //for I2C Detect
  24          {
  25   1          u8 i;     bit ack;
  26   1          for(i=0;i<8;i++) 
  27   1          {
  28   2            SCL = 0;              // Clock low
  29   2            SDA=(dat>>(7-i))&1;   // Send each bit, MSB first
  30   2            SCL = 1;              // Clock high               
  31   2          }
  32   1          //For checking ACK bit
  33   1          SCL=0;                // Clock low
  34   1          SDA=1;                // Release SDA line for ACK
  35   1          SCL=1;                // Clock high
  36   1          dlyMs(10);
  37   1          ack=SDA;            // Read ACK bit
  38   1          SCL=0;              // Clock low
  39   1          return ack;           // Return ACK bit
  40   1      }
  41          
  42          void i2cDetect(void)
  43          {
  44   1        u8 nDevices=0;  u8 address=0;
  45   1        u8 ack;
  46   1        lcd_init();
  47   1        lcd_cmd(0x80);
  48   1        lcd_string("Scanning...");
  49   1        lcd_cmd(0xC0);
  50   1        lcd_string("I2C Device:");
  51   1        lcd_string("0x");
  52   1        lcdDecToHex(address);
  53   1        while(1)
  54   1        {
C51 COMPILER V9.60.7.0   I2CDETECTDRIVER                                                   10/16/2024 14:21:14 PAGE 2   

  55   2          for(address=0;address<127;address++)
  56   2          {
  57   3            i2cStart();
  58   3            ack=I2C_Write((address<<1)|0);
  59   3            if(ack==0)
  60   3            {
  61   4              ++nDevices;
  62   4              lcd_cmd(0xC0);
  63   4              lcd_string("I2C Devices:");
  64   4              lcd_string("0x");
  65   4              lcdDecToHex(address);
  66   4              dlyMs(1000);
  67   4            }/*
  68   3            else if(ack==4)
  69   3            {
  70   3              lcd_cmd(0x01);
  71   3              lcd_cmd(0x80);
  72   3              lcd_string("Unknown Error");
  73   3              lcd_cmd(0xC0);
  74   3              lcd_string("at:0x");
  75   3              lcdDecToHex(address);
  76   3            }*/
  77   3            i2cStop();
  78   3            dlyMs(100);     
  79   3          }
  80   2          if(nDevices==0)
  81   2          {
  82   3            lcd_cmd(0x01);
  83   3            lcd_cmd(0x80);
  84   3            lcd_string("No I2C Device");
  85   3            lcd_cmd(0xC0);
  86   3            lcd_string("Found");
  87   3          }
  88   2          else
  89   2          {
  90   3            lcd_cmd(0x01);
  91   3            lcd_cmd(0x80);
  92   3            lcd_string("Devices Found:");
  93   3            lcd_int(nDevices);
  94   3            lcd_cmd(0xC0);
  95   3            lcd_string("Scan Completed");
  96   3          }
  97   2            while(1);
  98   2        }
  99   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    267    ----
   CONSTANT SIZE    =     90    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
